#!/bin/bash 
case $# in 
#I have used case for a easier checking
   2)
     if [-d $1]
     then
       path=$1 
       project_name=$2
       cd $path
       mkdir $project_name
#file management commands
       cd $project_name ; mkdir docs ; mkdir source ; mkdir backup  
       mkdir archive
#compile script starts here
       echo '#!/bin/bash 
             for z in $@
             do
             if [ $1='o' ]; then
                 if [[ -a $@ ]]; then
                     cat $@>>backup_$@ ; mv backup_$@ backup
                     gcc -o $USER $@ ;gcc -o $USER $@ 2>errors
                     more errors
             else
                continue
             fi

             elif [ -f $1 ]
             then
             cat $@>>backup1; mv backup1 backup
             gcc $@;  gcc $@ >errors
             more errors

             else
                echo "You are missing files. Type in: compile -o  file_names"
             fi
done' >>compile 
         chmod 777 compile 
     else 
       printf "Your path name is malformed.Type in: NewProject path project_name \n"
       exit
     fi ;;
    

     1)  project_name=$1
        mkdir $project_name  
        cd $project_name ; mkdir docs ; mkdir source ; mkdir backup  
        mkdir archive
        echo '#!/bin/bash 
for z in $@
do
   if [ $1='o' ]; then
             if [[ -a $@ ]]; then
                cat $@>>backup_$@ ; mv backup_$@ backup
                gcc -o $USER $@ ;gcc -o $USER $@ 2>errors
                more errors
             else
                continue
             fi

    elif [ -f $1 ]
    then
             cat $@>>backup1; mv backup1 backup
             gcc $@;  gcc $@ >errors
             more errors

    else
                echo "You are missing files. Type in: compile -o  file_names"
    fi
done' >>compile
       chmod 755 compile
         ;;

     0) printf "Project name is missing. Type in: NewProjcet path project_name \n"
       exit ;;
    
     *) printf "project_name needs to be a one-word\n";;     

esac






 






